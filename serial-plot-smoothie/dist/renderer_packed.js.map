{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./renderer.js","webpack:///./node_modules/smoothie/smoothie.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Smoothie","dataSets","Array","numPlots","charts","chartLineColors","chartFillColors","TimeSeries","SmoothieChart","minValue","maxValue","tooltip","timestampFormatter","timeFormatter","interpolation","addTimeSeries","strokeStyle","fillStyle","lineWidth","streamTo","document","getElementById","renderPlots","append","Date","getTime","pointsArr","now","Util","extend","arguments","length","binarySearch","data","low","high","mid","options","this","defaultOptions","disabled","clear","defaultChartOptions","seriesSet","currentValueRange","currentVisMinValue","lastRenderTimeMillis","lastChartTimestamp","mousemove","mouseout","resetBoundsInterval","resetBounds","Number","NaN","timestamp","sumRepeatedTimeStampValues","splice","push","isNaN","Math","max","min","dropOldData","oldestValidTime","maxDataSetLength","removeCount","tooltipFormatter","lines","series","yMaxFormatter","labels","precision","join","millisPerPixel","enableDpiScaling","yMinFormatter","parseFloat","toFixed","yIntermediateFormatter","intermediate","maxValueScale","minValueScale","scaleSmoothing","scrollBackwards","displayDataFromPercentile","grid","sharpLines","millisPerLine","verticalSections","borderVisible","fontSize","fontFamily","showIntermediateLabels","intermediateLabelSameAxis","horizontalLines","tooltipLine","nonRealtimeData","responsive","limitFPS","AnimateCompatibility","requestAnimationFrame","callback","element","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","id","clearTimeout","defaultSeriesPresentationOptions","timeSeries","resetBoundsTimerId","setInterval","removeTimeSeries","numSeries","clearInterval","getTimeSeriesOptions","bringToFront","set","canvas","delayMillis","delay","start","getTooltipEl","tooltipEl","createElement","className","style","position","display","body","appendChild","updateTooltip","el","mouseover","time","mouseX","offsetWidth","closeIdx","index","innerHTML","evt","offsetX","mouseY","offsetY","mousePageX","pageX","mousePageY","pageY","top","round","left","resize","width","height","dpr","devicePixelRatio","offsetHeight","lastWidth","setAttribute","floor","toString","getContext","scale","lastHeight","parseInt","getAttribute","originalWidth","originalHeight","frame","addEventListener","animate","dateZero","maxTimeStamp","reduce","dataSet","indexToCheck","lastDataTimeStamp","render","stop","removeEventListener","updateValueRange","chartOptions","chartMaxValue","chartMinValue","abs","yRangeFunction","range","valueRangeDiff","minValueDiff","isAnimatingScale","valueRange","nowMillis","maxIdleMillis","context","dimensions","clientWidth","clientHeight","valueToYPixel","offset","timeToXPixel","font","save","translate","beginPath","rect","clip","clearRect","fillRect","restore","gx","moveTo","lineTo","stroke","closePath","v","gy","strokeRect","hl","line","hly","color","seriesOptions","firstX","lastX","lastY","x","y","bezierCurveTo","fill","maxValueString","minValueString","maxLabelPos","measureText","minLabelPos","fillText","step","stepPixels","yValue","intermediateLabelPos","textUntilX","tx","ts","tsWidth","date","pad2","number","getHours","getMinutes","getSeconds"],"mappings":"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","file":"renderer_packed.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const Smoothie = require('smoothie');\n\nconst dataSets = new Array(numPlots);\nconst charts = new Array(numPlots);\n\n// 0: green, 1st: red\nconst chartLineColors = ['rgba(0, 255, 0, 1)', 'rgba(255, 0, 0, 1)'];\nconst chartFillColors = ['rgba(0, 255, 0, 0.2)', 'rgba(255, 0, 0, 0.2)'];\n\nfor (var i=0; i<numPlots; i++) {\n  dataSets[i] = new Smoothie.TimeSeries();\n\n  charts[i] = new Smoothie.SmoothieChart({\n    minValue: 0.0,\n    maxValue: 4095.0,\n    tooltip: true,\n    timestampFormatter: Smoothie.SmoothieChart.timeFormatter,\n    interpolation: 'linear'\n  });\n\n  charts[i].addTimeSeries(dataSets[i], {\n    strokeStyle: chartLineColors[i],\n    fillStyle: chartFillColors[i],\n    lineWidth: 1\n  });\n\n  charts[i].streamTo(document.getElementById(\"chart\"+i), 0);\n}\n\n\nrenderPlots = function() {\n  for (var i=0; i<numPlots; i++) {\n    dataSets[i].append(new Date().getTime(), pointsArr[i]);\n  }\n};\n","// MIT License:\n//\n// Copyright (c) 2010-2013, Joe Walnes\n//               2013-2018, Drew Noakes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Smoothie Charts - http://smoothiecharts.org/\n * (c) 2010-2013, Joe Walnes\n *     2013-2018, Drew Noakes\n *\n * v1.0: Main charting library, by Joe Walnes\n * v1.1: Auto scaling of axis, by Neil Dunn\n * v1.2: fps (frames per second) option, by Mathias Petterson\n * v1.3: Fix for divide by zero, by Paul Nikitochkin\n * v1.4: Set minimum, top-scale padding, remove timeseries, add optional timer to reset bounds, by Kelley Reynolds\n * v1.5: Set default frames per second to 50... smoother.\n *       .start(), .stop() methods for conserving CPU, by Dmitry Vyal\n *       options.interpolation = 'bezier' or 'line', by Dmitry Vyal\n *       options.maxValue to fix scale, by Dmitry Vyal\n * v1.6: minValue/maxValue will always get converted to floats, by Przemek Matylla\n * v1.7: options.grid.fillStyle may be a transparent color, by Dmitry A. Shashkin\n *       Smooth rescaling, by Kostas Michalopoulos\n * v1.8: Set max length to customize number of live points in the dataset with options.maxDataSetLength, by Krishna Narni\n * v1.9: Display timestamps along the bottom, by Nick and Stev-io\n *       (https://groups.google.com/forum/?fromgroups#!topic/smoothie-charts/-Ywse8FCpKI%5B1-25%5D)\n *       Refactored by Krishna Narni, to support timestamp formatting function\n * v1.10: Switch to requestAnimationFrame, removed the now obsoleted options.fps, by Gergely Imreh\n * v1.11: options.grid.sharpLines option added, by @drewnoakes\n *        Addressed warning seen in Firefox when seriesOption.fillStyle undefined, by @drewnoakes\n * v1.12: Support for horizontalLines added, by @drewnoakes\n *        Support for yRangeFunction callback added, by @drewnoakes\n * v1.13: Fixed typo (#32), by @alnikitich\n * v1.14: Timer cleared when last TimeSeries removed (#23), by @davidgaleano\n *        Fixed diagonal line on chart at start/end of data stream, by @drewnoakes\n * v1.15: Support for npm package (#18), by @dominictarr\n *        Fixed broken removeTimeSeries function (#24) by @davidgaleano\n *        Minor performance and tidying, by @drewnoakes\n * v1.16: Bug fix introduced in v1.14 relating to timer creation/clearance (#23), by @drewnoakes\n *        TimeSeries.append now deals with out-of-order timestamps, and can merge duplicates, by @zacwitte (#12)\n *        Documentation and some local variable renaming for clarity, by @drewnoakes\n * v1.17: Allow control over font size (#10), by @drewnoakes\n *        Timestamp text won't overlap, by @drewnoakes\n * v1.18: Allow control of max/min label precision, by @drewnoakes\n *        Added 'borderVisible' chart option, by @drewnoakes\n *        Allow drawing series with fill but no stroke (line), by @drewnoakes\n * v1.19: Avoid unnecessary repaints, and fixed flicker in old browsers having multiple charts in document (#40), by @asbai\n * v1.20: Add SmoothieChart.getTimeSeriesOptions and SmoothieChart.bringToFront functions, by @drewnoakes\n * v1.21: Add 'step' interpolation mode, by @drewnoakes\n * v1.22: Add support for different pixel ratios. Also add optional y limit formatters, by @copacetic\n * v1.23: Fix bug introduced in v1.22 (#44), by @drewnoakes\n * v1.24: Fix bug introduced in v1.23, re-adding parseFloat to y-axis formatter defaults, by @siggy_sf\n * v1.25: Fix bug seen when adding a data point to TimeSeries which is older than the current data, by @Nking92\n *        Draw time labels on top of series, by @comolosabia\n *        Add TimeSeries.clear function, by @drewnoakes\n * v1.26: Add support for resizing on high device pixel ratio screens, by @copacetic\n * v1.27: Fix bug introduced in v1.26 for non whole number devicePixelRatio values, by @zmbush\n * v1.28: Add 'minValueScale' option, by @megawac\n *        Fix 'labelPos' for different size of 'minValueString' 'maxValueString', by @henryn\n * v1.29: Support responsive sizing, by @drewnoakes\n * v1.29.1: Include types in package, and make property optional, by @TrentHouliston\n * v1.30: Fix inverted logic in devicePixelRatio support, by @scanlime\n * v1.31: Support tooltips, by @Sly1024 and @drewnoakes\n * v1.32: Support frame rate limit, by @dpuyosa\n * v1.33: Use Date static method instead of instance, by @nnnoel\n *        Fix bug with tooltips when multiple charts on a page, by @jpmbiz70\n * v1.34: Add disabled option to TimeSeries, by @TechGuard (#91)\n *        Add nonRealtimeData option, by @annazhelt (#92, #93)\n *        Add showIntermediateLabels option, by @annazhelt (#94)\n *        Add displayDataFromPercentile option, by @annazhelt (#95)\n *        Fix bug when hiding tooltip element, by @ralphwetzel (#96)\n *        Support intermediate y-axis labels, by @beikeland (#99)\n * v1.35: Fix issue with responsive mode at high DPI, by @drewnoakes (#101)\n */\n\n;(function(exports) {\n\n  // Date.now polyfill\n  Date.now = Date.now || function() { return new Date().getTime(); };\n\n  var Util = {\n    extend: function() {\n      arguments[0] = arguments[0] || {};\n      for (var i = 1; i < arguments.length; i++)\n      {\n        for (var key in arguments[i])\n        {\n          if (arguments[i].hasOwnProperty(key))\n          {\n            if (typeof(arguments[i][key]) === 'object') {\n              if (arguments[i][key] instanceof Array) {\n                arguments[0][key] = arguments[i][key];\n              } else {\n                arguments[0][key] = Util.extend(arguments[0][key], arguments[i][key]);\n              }\n            } else {\n              arguments[0][key] = arguments[i][key];\n            }\n          }\n        }\n      }\n      return arguments[0];\n    },\n    binarySearch: function(data, value) {\n      var low = 0,\n          high = data.length;\n      while (low < high) {\n        var mid = (low + high) >> 1;\n        if (value < data[mid][0])\n          high = mid;\n        else\n          low = mid + 1;\n      }\n      return low;\n    }\n  };\n\n  /**\n   * Initialises a new <code>TimeSeries</code> with optional data options.\n   *\n   * Options are of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   resetBounds: true,        // enables/disables automatic scaling of the y-axis\n   *   resetBoundsInterval: 3000 // the period between scaling calculations, in millis\n   * }\n   * </pre>\n   *\n   * Presentation options for TimeSeries are specified as an argument to <code>SmoothieChart.addTimeSeries</code>.\n   *\n   * @constructor\n   */\n  function TimeSeries(options) {\n    this.options = Util.extend({}, TimeSeries.defaultOptions, options);\n    this.disabled = false;\n    this.clear();\n  }\n\n  TimeSeries.defaultOptions = {\n    resetBoundsInterval: 3000,\n    resetBounds: true\n  };\n\n  /**\n   * Clears all data and state from this TimeSeries object.\n   */\n  TimeSeries.prototype.clear = function() {\n    this.data = [];\n    this.maxValue = Number.NaN; // The maximum value ever seen in this TimeSeries.\n    this.minValue = Number.NaN; // The minimum value ever seen in this TimeSeries.\n  };\n\n  /**\n   * Recalculate the min/max values for this <code>TimeSeries</code> object.\n   *\n   * This causes the graph to scale itself in the y-axis.\n   */\n  TimeSeries.prototype.resetBounds = function() {\n    if (this.data.length) {\n      // Walk through all data points, finding the min/max value\n      this.maxValue = this.data[0][1];\n      this.minValue = this.data[0][1];\n      for (var i = 1; i < this.data.length; i++) {\n        var value = this.data[i][1];\n        if (value > this.maxValue) {\n          this.maxValue = value;\n        }\n        if (value < this.minValue) {\n          this.minValue = value;\n        }\n      }\n    } else {\n      // No data exists, so set min/max to NaN\n      this.maxValue = Number.NaN;\n      this.minValue = Number.NaN;\n    }\n  };\n\n  /**\n   * Adds a new data point to the <code>TimeSeries</code>, preserving chronological order.\n   *\n   * @param timestamp the position, in time, of this data point\n   * @param value the value of this data point\n   * @param sumRepeatedTimeStampValues if <code>timestamp</code> has an exact match in the series, this flag controls\n   * whether it is replaced, or the values summed (defaults to false.)\n   */\n  TimeSeries.prototype.append = function(timestamp, value, sumRepeatedTimeStampValues) {\n    // Rewind until we hit an older timestamp\n    var i = this.data.length - 1;\n    while (i >= 0 && this.data[i][0] > timestamp) {\n      i--;\n    }\n\n    if (i === -1) {\n      // This new item is the oldest data\n      this.data.splice(0, 0, [timestamp, value]);\n    } else if (this.data.length > 0 && this.data[i][0] === timestamp) {\n      // Update existing values in the array\n      if (sumRepeatedTimeStampValues) {\n        // Sum this value into the existing 'bucket'\n        this.data[i][1] += value;\n        value = this.data[i][1];\n      } else {\n        // Replace the previous value\n        this.data[i][1] = value;\n      }\n    } else if (i < this.data.length - 1) {\n      // Splice into the correct position to keep timestamps in order\n      this.data.splice(i + 1, 0, [timestamp, value]);\n    } else {\n      // Add to the end of the array\n      this.data.push([timestamp, value]);\n    }\n\n    this.maxValue = isNaN(this.maxValue) ? value : Math.max(this.maxValue, value);\n    this.minValue = isNaN(this.minValue) ? value : Math.min(this.minValue, value);\n  };\n\n  TimeSeries.prototype.dropOldData = function(oldestValidTime, maxDataSetLength) {\n    // We must always keep one expired data point as we need this to draw the\n    // line that comes into the chart from the left, but any points prior to that can be removed.\n    var removeCount = 0;\n    while (this.data.length - removeCount >= maxDataSetLength && this.data[removeCount + 1][0] < oldestValidTime) {\n      removeCount++;\n    }\n    if (removeCount !== 0) {\n      this.data.splice(0, removeCount);\n    }\n  };\n\n  /**\n   * Initialises a new <code>SmoothieChart</code>.\n   *\n   * Options are optional, and should be of the form below. Just specify the values you\n   * need and the rest will be given sensible defaults as shown:\n   *\n   * <pre>\n   * {\n   *   minValue: undefined,                      // specify to clamp the lower y-axis to a given value\n   *   maxValue: undefined,                      // specify to clamp the upper y-axis to a given value\n   *   maxValueScale: 1,                         // allows proportional padding to be added above the chart. for 10% padding, specify 1.1.\n   *   minValueScale: 1,                         // allows proportional padding to be added below the chart. for 10% padding, specify 1.1.\n   *   yRangeFunction: undefined,                // function({min: , max: }) { return {min: , max: }; }\n   *   scaleSmoothing: 0.125,                    // controls the rate at which y-value zoom animation occurs\n   *   millisPerPixel: 20,                       // sets the speed at which the chart pans by\n   *   enableDpiScaling: true,                   // support rendering at different DPI depending on the device\n   *   yMinFormatter: function(min, precision) { // callback function that formats the min y value label\n   *     return parseFloat(min).toFixed(precision);\n   *   },\n   *   yMaxFormatter: function(max, precision) { // callback function that formats the max y value label\n   *     return parseFloat(max).toFixed(precision);\n   *   },\n   *   yIntermediateFormatter: function(intermediate, precision) { // callback function that formats the intermediate y value labels\n   *     return parseFloat(intermediate).toFixed(precision);\n   *   },\n   *   maxDataSetLength: 2,\n   *   interpolation: 'bezier'                   // one of 'bezier', 'linear', or 'step'\n   *   timestampFormatter: null,                 // optional function to format time stamps for bottom of chart\n   *                                             // you may use SmoothieChart.timeFormatter, or your own: function(date) { return ''; }\n   *   scrollBackwards: false,                   // reverse the scroll direction of the chart\n   *   horizontalLines: [],                      // [ { value: 0, color: '#ffffff', lineWidth: 1 } ]\n   *   grid:\n   *   {\n   *     fillStyle: '#000000',                   // the background colour of the chart\n   *     lineWidth: 1,                           // the pixel width of grid lines\n   *     strokeStyle: '#777777',                 // colour of grid lines\n   *     millisPerLine: 1000,                    // distance between vertical grid lines\n   *     sharpLines: false,                      // controls whether grid lines are 1px sharp, or softened\n   *     verticalSections: 2,                    // number of vertical sections marked out by horizontal grid lines\n   *     borderVisible: true                     // whether the grid lines trace the border of the chart or not\n   *   },\n   *   labels\n   *   {\n   *     disabled: false,                        // enables/disables labels showing the min/max values\n   *     fillStyle: '#ffffff',                   // colour for text of labels,\n   *     fontSize: 15,\n   *     fontFamily: 'sans-serif',\n   *     precision: 2,\n   *     showIntermediateLabels: false,          // shows intermediate labels between min and max values along y axis\n   *     intermediateLabelSameAxis: true,\n   *   },\n   *   tooltip: false                            // show tooltip when mouse is over the chart\n   *   tooltipLine: {                            // properties for a vertical line at the cursor position\n   *     lineWidth: 1,\n   *     strokeStyle: '#BBBBBB'\n   *   },\n   *   tooltipFormatter: SmoothieChart.tooltipFormatter, // formatter function for tooltip text\n   *   nonRealtimeData: false,                   // use time of latest data as current time\n   *   displayDataFromPercentile: 1,             // display not latest data, but data from the given percentile\n   *                                             // useful when trying to see old data saved by setting a high value for maxDataSetLength\n   *                                             // should be a value between 0 and 1\n   *   responsive: false,                        // whether the chart should adapt to the size of the canvas\n   *   limitFPS: 0                               // maximum frame rate the chart will render at, in FPS (zero means no limit)\n   * }\n   * </pre>\n   *\n   * @constructor\n   */\n  function SmoothieChart(options) {\n    this.options = Util.extend({}, SmoothieChart.defaultChartOptions, options);\n    this.seriesSet = [];\n    this.currentValueRange = 1;\n    this.currentVisMinValue = 0;\n    this.lastRenderTimeMillis = 0;\n    this.lastChartTimestamp = 0;\n\n    this.mousemove = this.mousemove.bind(this);\n    this.mouseout = this.mouseout.bind(this);\n  }\n\n  /** Formats the HTML string content of the tooltip. */\n  SmoothieChart.tooltipFormatter = function (timestamp, data) {\n      var timestampFormatter = this.options.timestampFormatter || SmoothieChart.timeFormatter,\n          lines = [timestampFormatter(new Date(timestamp))];\n\n      for (var i = 0; i < data.length; ++i) {\n        lines.push('<span style=\"color:' + data[i].series.options.strokeStyle + '\">' +\n        this.options.yMaxFormatter(data[i].value, this.options.labels.precision) + '</span>');\n      }\n\n      return lines.join('<br>');\n  };\n\n  SmoothieChart.defaultChartOptions = {\n    millisPerPixel: 20,\n    enableDpiScaling: true,\n    yMinFormatter: function(min, precision) {\n      return parseFloat(min).toFixed(precision);\n    },\n    yMaxFormatter: function(max, precision) {\n      return parseFloat(max).toFixed(precision);\n    },\n    yIntermediateFormatter: function(intermediate, precision) {\n      return parseFloat(intermediate).toFixed(precision);\n    },\n    maxValueScale: 1,\n    minValueScale: 1,\n    interpolation: 'bezier',\n    scaleSmoothing: 0.125,\n    maxDataSetLength: 2,\n    scrollBackwards: false,\n    displayDataFromPercentile: 1,\n    grid: {\n      fillStyle: '#000000',\n      strokeStyle: '#777777',\n      lineWidth: 1,\n      sharpLines: false,\n      millisPerLine: 1000,\n      verticalSections: 2,\n      borderVisible: true\n    },\n    labels: {\n      fillStyle: '#ffffff',\n      disabled: false,\n      fontSize: 10,\n      fontFamily: 'monospace',\n      precision: 2,\n      showIntermediateLabels: false,\n      intermediateLabelSameAxis: true,\n    },\n    horizontalLines: [],\n    tooltip: false,\n    tooltipLine: {\n      lineWidth: 1,\n      strokeStyle: '#BBBBBB'\n    },\n    tooltipFormatter: SmoothieChart.tooltipFormatter,\n    nonRealtimeData: false,\n    responsive: false,\n    limitFPS: 0\n  };\n\n  // Based on http://inspirit.github.com/jsfeat/js/compatibility.js\n  SmoothieChart.AnimateCompatibility = (function() {\n    var requestAnimationFrame = function(callback, element) {\n          var requestAnimationFrame =\n            window.requestAnimationFrame        ||\n            window.webkitRequestAnimationFrame  ||\n            window.mozRequestAnimationFrame     ||\n            window.oRequestAnimationFrame       ||\n            window.msRequestAnimationFrame      ||\n            function(callback) {\n              return window.setTimeout(function() {\n                callback(Date.now());\n              }, 16);\n            };\n          return requestAnimationFrame.call(window, callback, element);\n        },\n        cancelAnimationFrame = function(id) {\n          var cancelAnimationFrame =\n            window.cancelAnimationFrame ||\n            function(id) {\n              clearTimeout(id);\n            };\n          return cancelAnimationFrame.call(window, id);\n        };\n\n    return {\n      requestAnimationFrame: requestAnimationFrame,\n      cancelAnimationFrame: cancelAnimationFrame\n    };\n  })();\n\n  SmoothieChart.defaultSeriesPresentationOptions = {\n    lineWidth: 1,\n    strokeStyle: '#ffffff'\n  };\n\n  /**\n   * Adds a <code>TimeSeries</code> to this chart, with optional presentation options.\n   *\n   * Presentation options should be of the form (defaults shown):\n   *\n   * <pre>\n   * {\n   *   lineWidth: 1,\n   *   strokeStyle: '#ffffff',\n   *   fillStyle: undefined\n   * }\n   * </pre>\n   */\n  SmoothieChart.prototype.addTimeSeries = function(timeSeries, options) {\n    this.seriesSet.push({timeSeries: timeSeries, options: Util.extend({}, SmoothieChart.defaultSeriesPresentationOptions, options)});\n    if (timeSeries.options.resetBounds && timeSeries.options.resetBoundsInterval > 0) {\n      timeSeries.resetBoundsTimerId = setInterval(\n        function() {\n          timeSeries.resetBounds();\n        },\n        timeSeries.options.resetBoundsInterval\n      );\n    }\n  };\n\n  /**\n   * Removes the specified <code>TimeSeries</code> from the chart.\n   */\n  SmoothieChart.prototype.removeTimeSeries = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        this.seriesSet.splice(i, 1);\n        break;\n      }\n    }\n    // If a timer was operating for that timeseries, remove it\n    if (timeSeries.resetBoundsTimerId) {\n      // Stop resetting the bounds, if we were\n      clearInterval(timeSeries.resetBoundsTimerId);\n    }\n  };\n\n  /**\n   * Gets render options for the specified <code>TimeSeries</code>.\n   *\n   * As you may use a single <code>TimeSeries</code> in multiple charts with different formatting in each usage,\n   * these settings are stored in the chart.\n   */\n  SmoothieChart.prototype.getTimeSeriesOptions = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        return this.seriesSet[i].options;\n      }\n    }\n  };\n\n  /**\n   * Brings the specified <code>TimeSeries</code> to the top of the chart. It will be rendered last.\n   */\n  SmoothieChart.prototype.bringToFront = function(timeSeries) {\n    // Find the correct timeseries to remove, and remove it\n    var numSeries = this.seriesSet.length;\n    for (var i = 0; i < numSeries; i++) {\n      if (this.seriesSet[i].timeSeries === timeSeries) {\n        var set = this.seriesSet.splice(i, 1);\n        this.seriesSet.push(set[0]);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Instructs the <code>SmoothieChart</code> to start rendering to the provided canvas, with specified delay.\n   *\n   * @param canvas the target canvas element\n   * @param delayMillis an amount of time to wait before a data point is shown. This can prevent the end of the series\n   * from appearing on screen, with new values flashing into view, at the expense of some latency.\n   */\n  SmoothieChart.prototype.streamTo = function(canvas, delayMillis) {\n    this.canvas = canvas;\n    this.delay = delayMillis;\n    this.start();\n  };\n\n  SmoothieChart.prototype.getTooltipEl = function () {\n    // Create the tool tip element lazily\n    if (!this.tooltipEl) {\n      this.tooltipEl = document.createElement('div');\n      this.tooltipEl.className = 'smoothie-chart-tooltip';\n      this.tooltipEl.style.position = 'absolute';\n      this.tooltipEl.style.display = 'none';\n      document.body.appendChild(this.tooltipEl);\n    }\n    return this.tooltipEl;\n  };\n\n  SmoothieChart.prototype.updateTooltip = function () {\n    var el = this.getTooltipEl();\n\n    if (!this.mouseover || !this.options.tooltip) {\n      el.style.display = 'none';\n      return;\n    }\n\n    var time = this.lastChartTimestamp;\n\n    // x pixel to time\n    var t = this.options.scrollBackwards\n      ? time - this.mouseX * this.options.millisPerPixel\n      : time - (this.canvas.offsetWidth - this.mouseX) * this.options.millisPerPixel;\n\n    var data = [];\n\n     // For each data set...\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (timeSeries.disabled) {\n          continue;\n      }\n\n      // find datapoint closest to time 't'\n      var closeIdx = Util.binarySearch(timeSeries.data, t);\n      if (closeIdx > 0 && closeIdx < timeSeries.data.length) {\n        data.push({ series: this.seriesSet[d], index: closeIdx, value: timeSeries.data[closeIdx][1] });\n      }\n    }\n\n    if (data.length) {\n      el.innerHTML = this.options.tooltipFormatter.call(this, t, data);\n      el.style.display = 'block';\n    } else {\n      el.style.display = 'none';\n    }\n  };\n\n  SmoothieChart.prototype.mousemove = function (evt) {\n    this.mouseover = true;\n    this.mouseX = evt.offsetX;\n    this.mouseY = evt.offsetY;\n    this.mousePageX = evt.pageX;\n    this.mousePageY = evt.pageY;\n\n    var el = this.getTooltipEl();\n    el.style.top = Math.round(this.mousePageY) + 'px';\n    el.style.left = Math.round(this.mousePageX) + 'px';\n    this.updateTooltip();\n  };\n\n  SmoothieChart.prototype.mouseout = function () {\n    this.mouseover = false;\n    this.mouseX = this.mouseY = -1;\n    if (this.tooltipEl)\n      this.tooltipEl.style.display = 'none';\n  };\n\n  /**\n   * Make sure the canvas has the optimal resolution for the device's pixel ratio.\n   */\n  SmoothieChart.prototype.resize = function () {\n    var dpr = !this.options.enableDpiScaling || !window ? 1 : window.devicePixelRatio,\n        width, height;\n    if (this.options.responsive) {\n      // Newer behaviour: Use the canvas's size in the layout, and set the internal\n      // resolution according to that size and the device pixel ratio (eg: high DPI)\n      width = this.canvas.offsetWidth;\n      height = this.canvas.offsetHeight;\n\n      if (width !== this.lastWidth) {\n        this.lastWidth = width;\n        this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n      if (height !== this.lastHeight) {\n        this.lastHeight = height;\n        this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n    } else if (dpr !== 1) {\n      // Older behaviour: use the canvas's inner dimensions and scale the element's size\n      // according to that size and the device pixel ratio (eg: high DPI)\n      width = parseInt(this.canvas.getAttribute('width'));\n      height = parseInt(this.canvas.getAttribute('height'));\n\n      if (!this.originalWidth || (Math.floor(this.originalWidth * dpr) !== width)) {\n        this.originalWidth = width;\n        this.canvas.setAttribute('width', (Math.floor(width * dpr)).toString());\n        this.canvas.style.width = width + 'px';\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n\n      if (!this.originalHeight || (Math.floor(this.originalHeight * dpr) !== height)) {\n        this.originalHeight = height;\n        this.canvas.setAttribute('height', (Math.floor(height * dpr)).toString());\n        this.canvas.style.height = height + 'px';\n        this.canvas.getContext('2d').scale(dpr, dpr);\n      }\n    }\n  };\n\n  /**\n   * Starts the animation of this chart.\n   */\n  SmoothieChart.prototype.start = function() {\n    if (this.frame) {\n      // We're already running, so just return\n      return;\n    }\n\n    this.canvas.addEventListener('mousemove', this.mousemove);\n    this.canvas.addEventListener('mouseout', this.mouseout);\n\n    // Renders a frame, and queues the next frame for later rendering\n    var animate = function() {\n      this.frame = SmoothieChart.AnimateCompatibility.requestAnimationFrame(function() {\n        if(this.options.nonRealtimeData){\n           var dateZero = new Date(0);\n           // find the data point with the latest timestamp\n           var maxTimeStamp = this.seriesSet.reduce(function(max, series){\n             var dataSet = series.timeSeries.data;\n             var indexToCheck = Math.round(this.options.displayDataFromPercentile * dataSet.length) - 1;\n             indexToCheck = indexToCheck >= 0 ? indexToCheck : 0;\n             indexToCheck = indexToCheck <= dataSet.length -1 ? indexToCheck : dataSet.length -1;\n             if(dataSet && dataSet.length > 0)\n             {\n              // timestamp corresponds to element 0 of the data point\n              var lastDataTimeStamp = dataSet[indexToCheck][0];\n              max = max > lastDataTimeStamp ? max : lastDataTimeStamp;\n             }\n             return max;\n          }.bind(this), dateZero);\n          // use the max timestamp as current time\n          this.render(this.canvas, maxTimeStamp > dateZero ? maxTimeStamp : null);\n        } else {\n          this.render();\n        }\n        animate();\n      }.bind(this));\n    }.bind(this);\n\n    animate();\n  };\n\n  /**\n   * Stops the animation of this chart.\n   */\n  SmoothieChart.prototype.stop = function() {\n    if (this.frame) {\n      SmoothieChart.AnimateCompatibility.cancelAnimationFrame(this.frame);\n      delete this.frame;\n      this.canvas.removeEventListener('mousemove', this.mousemove);\n      this.canvas.removeEventListener('mouseout', this.mouseout);\n    }\n  };\n\n  SmoothieChart.prototype.updateValueRange = function() {\n    // Calculate the current scale of the chart, from all time series.\n    var chartOptions = this.options,\n        chartMaxValue = Number.NaN,\n        chartMinValue = Number.NaN;\n\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      // TODO(ndunn): We could calculate / track these values as they stream in.\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (timeSeries.disabled) {\n          continue;\n      }\n\n      if (!isNaN(timeSeries.maxValue)) {\n        chartMaxValue = !isNaN(chartMaxValue) ? Math.max(chartMaxValue, timeSeries.maxValue) : timeSeries.maxValue;\n      }\n\n      if (!isNaN(timeSeries.minValue)) {\n        chartMinValue = !isNaN(chartMinValue) ? Math.min(chartMinValue, timeSeries.minValue) : timeSeries.minValue;\n      }\n    }\n\n    // Scale the chartMaxValue to add padding at the top if required\n    if (chartOptions.maxValue != null) {\n      chartMaxValue = chartOptions.maxValue;\n    } else {\n      chartMaxValue *= chartOptions.maxValueScale;\n    }\n\n    // Set the minimum if we've specified one\n    if (chartOptions.minValue != null) {\n      chartMinValue = chartOptions.minValue;\n    } else {\n      chartMinValue -= Math.abs(chartMinValue * chartOptions.minValueScale - chartMinValue);\n    }\n\n    // If a custom range function is set, call it\n    if (this.options.yRangeFunction) {\n      var range = this.options.yRangeFunction({min: chartMinValue, max: chartMaxValue});\n      chartMinValue = range.min;\n      chartMaxValue = range.max;\n    }\n\n    if (!isNaN(chartMaxValue) && !isNaN(chartMinValue)) {\n      var targetValueRange = chartMaxValue - chartMinValue;\n      var valueRangeDiff = (targetValueRange - this.currentValueRange);\n      var minValueDiff = (chartMinValue - this.currentVisMinValue);\n      this.isAnimatingScale = Math.abs(valueRangeDiff) > 0.1 || Math.abs(minValueDiff) > 0.1;\n      this.currentValueRange += chartOptions.scaleSmoothing * valueRangeDiff;\n      this.currentVisMinValue += chartOptions.scaleSmoothing * minValueDiff;\n    }\n\n    this.valueRange = { min: chartMinValue, max: chartMaxValue };\n  };\n\n  SmoothieChart.prototype.render = function(canvas, time) {\n    var nowMillis = Date.now();\n\n    // Respect any frame rate limit.\n    if (this.options.limitFPS > 0 && nowMillis - this.lastRenderTimeMillis < (1000/this.options.limitFPS))\n      return;\n\n    if (!this.isAnimatingScale) {\n      // We're not animating. We can use the last render time and the scroll speed to work out whether\n      // we actually need to paint anything yet. If not, we can return immediately.\n\n      // Render at least every 1/6th of a second. The canvas may be resized, which there is\n      // no reliable way to detect.\n      var maxIdleMillis = Math.min(1000/6, this.options.millisPerPixel);\n\n      if (nowMillis - this.lastRenderTimeMillis < maxIdleMillis) {\n        return;\n      }\n    }\n\n    this.resize();\n    this.updateTooltip();\n\n    this.lastRenderTimeMillis = nowMillis;\n\n    canvas = canvas || this.canvas;\n    time = time || nowMillis - (this.delay || 0);\n\n    // Round time down to pixel granularity, so motion appears smoother.\n    time -= time % this.options.millisPerPixel;\n\n    this.lastChartTimestamp = time;\n\n    var context = canvas.getContext('2d'),\n        chartOptions = this.options,\n        dimensions = { top: 0, left: 0, width: canvas.clientWidth, height: canvas.clientHeight },\n        // Calculate the threshold time for the oldest data points.\n        oldestValidTime = time - (dimensions.width * chartOptions.millisPerPixel),\n        valueToYPixel = function(value) {\n          var offset = value - this.currentVisMinValue;\n          return this.currentValueRange === 0\n            ? dimensions.height\n            : dimensions.height - (Math.round((offset / this.currentValueRange) * dimensions.height));\n        }.bind(this),\n        timeToXPixel = function(t) {\n          if(chartOptions.scrollBackwards) {\n            return Math.round((time - t) / chartOptions.millisPerPixel);\n          }\n          return Math.round(dimensions.width - ((time - t) / chartOptions.millisPerPixel));\n        };\n\n    this.updateValueRange();\n\n    context.font = chartOptions.labels.fontSize + 'px ' + chartOptions.labels.fontFamily;\n\n    // Save the state of the canvas context, any transformations applied in this method\n    // will get removed from the stack at the end of this method when .restore() is called.\n    context.save();\n\n    // Move the origin.\n    context.translate(dimensions.left, dimensions.top);\n\n    // Create a clipped rectangle - anything we draw will be constrained to this rectangle.\n    // This prevents the occasional pixels from curves near the edges overrunning and creating\n    // screen cheese (that phrase should need no explanation).\n    context.beginPath();\n    context.rect(0, 0, dimensions.width, dimensions.height);\n    context.clip();\n\n    // Clear the working area.\n    context.save();\n    context.fillStyle = chartOptions.grid.fillStyle;\n    context.clearRect(0, 0, dimensions.width, dimensions.height);\n    context.fillRect(0, 0, dimensions.width, dimensions.height);\n    context.restore();\n\n    // Grid lines...\n    context.save();\n    context.lineWidth = chartOptions.grid.lineWidth;\n    context.strokeStyle = chartOptions.grid.strokeStyle;\n    // Vertical (time) dividers.\n    if (chartOptions.grid.millisPerLine > 0) {\n      context.beginPath();\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\n           t >= oldestValidTime;\n           t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t);\n        if (chartOptions.grid.sharpLines) {\n          gx -= 0.5;\n        }\n        context.moveTo(gx, 0);\n        context.lineTo(gx, dimensions.height);\n      }\n      context.stroke();\n      context.closePath();\n    }\n\n    // Horizontal (value) dividers.\n    for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n      var gy = Math.round(v * dimensions.height / chartOptions.grid.verticalSections);\n      if (chartOptions.grid.sharpLines) {\n        gy -= 0.5;\n      }\n      context.beginPath();\n      context.moveTo(0, gy);\n      context.lineTo(dimensions.width, gy);\n      context.stroke();\n      context.closePath();\n    }\n    // Bounding rectangle.\n    if (chartOptions.grid.borderVisible) {\n      context.beginPath();\n      context.strokeRect(0, 0, dimensions.width, dimensions.height);\n      context.closePath();\n    }\n    context.restore();\n\n    // Draw any horizontal lines...\n    if (chartOptions.horizontalLines && chartOptions.horizontalLines.length) {\n      for (var hl = 0; hl < chartOptions.horizontalLines.length; hl++) {\n        var line = chartOptions.horizontalLines[hl],\n            hly = Math.round(valueToYPixel(line.value)) - 0.5;\n        context.strokeStyle = line.color || '#ffffff';\n        context.lineWidth = line.lineWidth || 1;\n        context.beginPath();\n        context.moveTo(0, hly);\n        context.lineTo(dimensions.width, hly);\n        context.stroke();\n        context.closePath();\n      }\n    }\n\n    // For each data set...\n    for (var d = 0; d < this.seriesSet.length; d++) {\n      context.save();\n      var timeSeries = this.seriesSet[d].timeSeries;\n      if (timeSeries.disabled) {\n          continue;\n      }\n\n      var dataSet = timeSeries.data,\n          seriesOptions = this.seriesSet[d].options;\n\n      // Delete old data that's moved off the left of the chart.\n      timeSeries.dropOldData(oldestValidTime, chartOptions.maxDataSetLength);\n\n      // Set style for this dataSet.\n      context.lineWidth = seriesOptions.lineWidth;\n      context.strokeStyle = seriesOptions.strokeStyle;\n      // Draw the line...\n      context.beginPath();\n      // Retain lastX, lastY for calculating the control points of bezier curves.\n      var firstX = 0, lastX = 0, lastY = 0;\n      for (var i = 0; i < dataSet.length && dataSet.length !== 1; i++) {\n        var x = timeToXPixel(dataSet[i][0]),\n            y = valueToYPixel(dataSet[i][1]);\n\n        if (i === 0) {\n          firstX = x;\n          context.moveTo(x, y);\n        } else {\n          switch (chartOptions.interpolation) {\n            case \"linear\":\n            case \"line\": {\n              context.lineTo(x,y);\n              break;\n            }\n            case \"bezier\":\n            default: {\n              // Great explanation of Bezier curves: http://en.wikipedia.org/wiki/Bezier_curve#Quadratic_curves\n              //\n              // Assuming A was the last point in the line plotted and B is the new point,\n              // we draw a curve with control points P and Q as below.\n              //\n              // A---P\n              //     |\n              //     |\n              //     |\n              //     Q---B\n              //\n              // Importantly, A and P are at the same y coordinate, as are B and Q. This is\n              // so adjacent curves appear to flow as one.\n              //\n              context.bezierCurveTo( // startPoint (A) is implicit from last iteration of loop\n                Math.round((lastX + x) / 2), lastY, // controlPoint1 (P)\n                Math.round((lastX + x)) / 2, y, // controlPoint2 (Q)\n                x, y); // endPoint (B)\n              break;\n            }\n            case \"step\": {\n              context.lineTo(x,lastY);\n              context.lineTo(x,y);\n              break;\n            }\n          }\n        }\n\n        lastX = x; lastY = y;\n      }\n\n      if (dataSet.length > 1) {\n        if (seriesOptions.fillStyle) {\n          // Close up the fill region.\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, lastY);\n          context.lineTo(dimensions.width + seriesOptions.lineWidth + 1, dimensions.height + seriesOptions.lineWidth + 1);\n          context.lineTo(firstX, dimensions.height + seriesOptions.lineWidth);\n          context.fillStyle = seriesOptions.fillStyle;\n          context.fill();\n        }\n\n        if (seriesOptions.strokeStyle && seriesOptions.strokeStyle !== 'none') {\n          context.stroke();\n        }\n        context.closePath();\n      }\n      context.restore();\n    }\n\n    if (chartOptions.tooltip && this.mouseX >= 0) {\n      // Draw vertical bar to show tooltip position\n      context.lineWidth = chartOptions.tooltipLine.lineWidth;\n      context.strokeStyle = chartOptions.tooltipLine.strokeStyle;\n      context.beginPath();\n      context.moveTo(this.mouseX, 0);\n      context.lineTo(this.mouseX, dimensions.height);\n      context.closePath();\n      context.stroke();\n      this.updateTooltip();\n    }\n\n    // Draw the axis values on the chart.\n    if (!chartOptions.labels.disabled && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)) {\n      var maxValueString = chartOptions.yMaxFormatter(this.valueRange.max, chartOptions.labels.precision),\n          minValueString = chartOptions.yMinFormatter(this.valueRange.min, chartOptions.labels.precision),\n          maxLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(maxValueString).width - 2,\n          minLabelPos = chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(minValueString).width - 2;\n      context.fillStyle = chartOptions.labels.fillStyle;\n      context.fillText(maxValueString, maxLabelPos, chartOptions.labels.fontSize);\n      context.fillText(minValueString, minLabelPos, dimensions.height - 2);\n    }\n\n    // Display intermediate y axis labels along y-axis to the left of the chart\n    if ( chartOptions.labels.showIntermediateLabels\n          && !isNaN(this.valueRange.min) && !isNaN(this.valueRange.max)\n          && chartOptions.grid.verticalSections > 0) {\n      // show a label above every vertical section divider\n      var step = (this.valueRange.max - this.valueRange.min) / chartOptions.grid.verticalSections;\n      var stepPixels = dimensions.height / chartOptions.grid.verticalSections;\n      for (var v = 1; v < chartOptions.grid.verticalSections; v++) {\n        var gy = dimensions.height - Math.round(v * stepPixels);\n        if (chartOptions.grid.sharpLines) {\n          gy -= 0.5;\n        }\n        var yValue = chartOptions.yIntermediateFormatter(this.valueRange.min + (v * step), chartOptions.labels.precision);\n        //left of right axis?\n        intermediateLabelPos =\n          chartOptions.labels.intermediateLabelSameAxis\n          ? (chartOptions.scrollBackwards ? 0 : dimensions.width - context.measureText(yValue).width - 2)\n          : (chartOptions.scrollBackwards ? dimensions.width - context.measureText(yValue).width - 2 : 0);\n\n        context.fillText(yValue, intermediateLabelPos, gy - chartOptions.grid.lineWidth);\n      }\n    }\n\n    // Display timestamps along x-axis at the bottom of the chart.\n    if (chartOptions.timestampFormatter && chartOptions.grid.millisPerLine > 0) {\n      var textUntilX = chartOptions.scrollBackwards\n        ? context.measureText(minValueString).width\n        : dimensions.width - context.measureText(minValueString).width + 4;\n      for (var t = time - (time % chartOptions.grid.millisPerLine);\n           t >= oldestValidTime;\n           t -= chartOptions.grid.millisPerLine) {\n        var gx = timeToXPixel(t);\n        // Only draw the timestamp if it won't overlap with the previously drawn one.\n        if ((!chartOptions.scrollBackwards && gx < textUntilX) || (chartOptions.scrollBackwards && gx > textUntilX))  {\n          // Formats the timestamp based on user specified formatting function\n          // SmoothieChart.timeFormatter function above is one such formatting option\n          var tx = new Date(t),\n            ts = chartOptions.timestampFormatter(tx),\n            tsWidth = context.measureText(ts).width;\n\n          textUntilX = chartOptions.scrollBackwards\n            ? gx + tsWidth + 2\n            : gx - tsWidth - 2;\n\n          context.fillStyle = chartOptions.labels.fillStyle;\n          if(chartOptions.scrollBackwards) {\n            context.fillText(ts, gx, dimensions.height - 2);\n          } else {\n            context.fillText(ts, gx - tsWidth, dimensions.height - 2);\n          }\n        }\n      }\n    }\n\n    context.restore(); // See .save() above.\n  };\n\n  // Sample timestamp formatting function\n  SmoothieChart.timeFormatter = function(date) {\n    function pad2(number) { return (number < 10 ? '0' : '') + number }\n    return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\n  };\n\n  exports.TimeSeries = TimeSeries;\n  exports.SmoothieChart = SmoothieChart;\n\n})(typeof exports === 'undefined' ? this : exports);\n"],"sourceRoot":""}